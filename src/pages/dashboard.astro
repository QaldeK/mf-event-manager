---
import Layout from "../layouts/Layout.astro";
import {supabase} from "../lib/supabase";
import CreateEvent from "../components/CreateEvent.astro";
import EventsFutureList from "../components/EventsFutureList.astro";

const {cookies, redirect} = Astro;

const accessToken = cookies.get("sb-access-token");
const refreshToken = cookies.get("sb-refresh-token");

if (!accessToken || !refreshToken) {
  return redirect("/signin");
}

const {data, error} = await supabase.auth.setSession({
  refresh_token: refreshToken.value,
  access_token: accessToken.value,
});

if (error) {
  cookies.delete("sb-access-token", {
    path: "/",
  });
  cookies.delete("sb-refresh-token", {
    path: "/",
  });

  return redirect("/signin");
}

const email = data.user?.email;
---

<style>
  [x-cloak] {
    display: none;
  }
</style>

<Layout title="dashboard">
  <h1>Bienvenue {email}</h1>
  <p>Nous sommes heureux de vous voir ici.</p>
  <form action="/api/auth/signout">
    <button
      type="submit"
      class="mt-4 bg-blue-500 hover:bg-blue-600 text-white font-medium py-2 px-4 rounded-md"
      >Se déconnecter</button
    >
  </form>

  <div x-data="$store.modalEvent">
    <button
      @click="$store.modalEvent.toggle()"
      data-modal-target="create-event-modal"
      class="mt-4 bg-gray-800 hover:bg-gray-700 text-white font-medium py-2 px-4 rounded-md">
      Créer un événement
    </button>
    <CreateEvent />
  </div>
  <EventsFutureList />
</Layout>

<script>
  import AsyncAlpine from "async-alpine";
  import Alpine from "alpinejs";
  AsyncAlpine.init(Alpine);
  AsyncAlpine.start();

  window.Alpine = Alpine;

  Alpine.store("modalEvent", {
    // categories: [],
    message: "",
    show: false,

    toggle() {
      this.show = !this.show;
    },
  });

  Alpine.directive("tooltip", (el, {modifiers, expression}, {cleanup}) => {
    let tooltipText = expression;
    let tooltipArrow = modifiers.includes("noarrow") ? false : true;
    let tooltipPosition = "top";
    let tooltipId =
      "tooltip-" +
      Date.now().toString(36) +
      Math.random().toString(36).substring(2, 7);
    let positions = ["top", "bottom", "left", "right"];
    let elementPosition = getComputedStyle(el).position;

    for (let position of positions) {
      if (modifiers.includes(position)) {
        tooltipPosition = position;
        break;
      }
    }

    if (!["relative", "absolute", "fixed"].includes(elementPosition)) {
      el.style.position = "relative";
    }

    let tooltipHTML = `
                <div id="${tooltipId}" x-data="{ tooltipVisible: false, tooltipText: '${tooltipText}', tooltipArrow: ${tooltipArrow}, tooltipPosition: '${tooltipPosition}' }" x-ref="tooltip" x-init="setTimeout(function(){ tooltipVisible = true; }, 1);" x-show="tooltipVisible" :class="{ 'top-0 left-1/2 -translate-x-1/2 -mt-0.5 -translate-y-full' : tooltipPosition == 'top', 'top-1/2 -translate-y-1/2 -ml-1.5 left-0 -translate-x-full' : tooltipPosition == 'left', 'bottom-0 left-1/2 -translate-x-1/2 -mb-0.5 translate-y-full' : tooltipPosition == 'bottom', 'top-1/2 -translate-y-1/2 -mr-1.5 right-0 translate-x-full' : tooltipPosition == 'right' }" class="absolute w-auto text-sm" x-cloak>
                    <div x-show="tooltipVisible" x-transition class="relative px-2 py-1 text-white bg-black rounded bg-opacity-90">
                        <p x-text="tooltipText" class="flex-shrink-0 block text-xs whitespace-nowrap"></p>
                        <div x-ref="tooltipArrow" x-show="tooltipArrow" :class="{ 'bottom-0 -translate-x-1/2 left-1/2 w-2.5 translate-y-full' : tooltipPosition == 'top', 'right-0 -translate-y-1/2 top-1/2 h-2.5 -mt-px translate-x-full' : tooltipPosition == 'left', 'top-0 -translate-x-1/2 left-1/2 w-2.5 -translate-y-full' : tooltipPosition == 'bottom', 'left-0 -translate-y-1/2 top-1/2 h-2.5 -mt-px -translate-x-full' : tooltipPosition == 'right' }" class="absolute inline-flex items-center justify-center overflow-hidden">
                            <div :class="{ 'origin-top-left -rotate-45' : tooltipPosition == 'top', 'origin-top-left rotate-45' : tooltipPosition == 'left', 'origin-bottom-left rotate-45' : tooltipPosition == 'bottom', 'origin-top-right -rotate-45' : tooltipPosition == 'right' }" class="w-1.5 h-1.5 transform bg-black bg-opacity-90"></div>
                        </div>
                    </div>
                </div>
            `;

    el.dataset.tooltip = tooltipId;

    let mouseEnter = function (event) {
      el.innerHTML += tooltipHTML;
    };

    let mouseLeave = function (event) {
      document.getElementById(event.target.dataset.tooltip).remove();
    };

    el.addEventListener("mouseenter", mouseEnter);
    el.addEventListener("mouseleave", mouseLeave);

    cleanup(() => {
      el.removeEventListener("mouseenter", mouseEnter);
      el.removeEventListener("mouseleave", mouseLeave);
    });
  });
</script>
