---
import TimePicker from "./timePicker.astro";
---

<template x-if="$store.modalEvent.show" x-cloak>
  <div x-ignore ax-load="visible" x-data="createEvent">
    <div
      class="fixed z-10 inset-0 overflow-y-auto"
      aria-labelledby="modal-title"
      role="dialog"
      aria-modal="true"
    >
      <div
        class="flex items-end justify-center min-h-screen pt-4 px-4 pb-20 text-center sm:block sm:p-0"
      >
        <div
          class="fixed inset-0 bg-gray-500 bg-opacity-75 transition-opacity"
          aria-hidden="true"
        >
        </div>

        <span
          class="hidden sm:inline-block sm:align-middle sm:h-screen"
          aria-hidden="true"
          >&#8203;
        </span>

        <div
          class="inline-block align-bottom bg-white rounded-lg text-left overflow-hidden shadow-xl transform transition-all sm:my-8 sm:align-middle sm:max-w-lg sm:w-full"
        >
          <div class="bg-white px-4 pt-5 pb-4 sm:p-6 sm:pb-4">
            <div>
              <form x-on:submit.prevent="submit">
                <div>
                  <label
                    for="event_title"
                    class="block font-medium text-gray-700"
                    >Titre de l'événement</label
                  >
                  <input
                    type="text"
                    x-model="eventTitle"
                    id="event_title"
                    required
                    class="mt-1 block w-full p-2 border border-gray-300 rounded-md"
                  />
                </div>
                <div>
                  <label for="date" class="block font-medium text-gray-700"
                    >Date</label
                  >
                  <input
                    type="date"
                    x-model="date"
                    id="date"
                    class="mt-1 block w-full p-2 border border-gray-300 rounded-md"
                  />
                </div>
                <div>
                  <label
                    for="start_time"
                    class="block font-medium text-gray-700"
                    >Heure de début</label
                  >
                  <input
                    type="time"
                    x-model="hStart"
                    id="start_time"
                    class="mt-1 block w-full p-2 border border-gray-300 rounded-md"
                  />
                </div>
                <div>
                  <label for="end_time" class="block font-medium text-gray-700"
                    >Heure de fin</label
                  >
                  <input
                    type="time"
                    x-model="hEnd"
                    id="end_time"
                    class="mt-1 block w-full p-2 border border-gray-300 rounded-md"
                  />
                </div>
                <!-- <TimePicker /> -->
                <!-- Bouton checkbox Categories  -->
                <div class="flex flex-row flex-wrap gap-4 my-2">
                  <template x-for="(category, index) in categories">
                    <button
                      type="button"
                      class="flex items-center space-x-2 px-4 py-1 rounded-md bg-gray-200 hover:bg-gray-300 focus:outline-none focus:ring-2 focus:ring-gray-500"
                      :class="{ 'bg-blue-500 text-white hover:bg-blue-600': category.isChecked }"
                      @click="toggleCategory(index)"
                      :id="category.name"
                    >
                      <input
                        type="checkbox"
                        class="form-checkbox h-5 w-5 text-gray-600 rounded"
                        x-model="category.isChecked"
                        :id="category.value"
                        :name="category.value"
                      />
                      <span class="text-gray-700" x-text="category.name"></span>
                    </button>
                  </template>
                </div>
                <!--/ Bouton checkbox Categories  -->
                <div class="flex gap-4">
                  <div>
                    <label for="confirmed" class="font-medium text-gray-700"
                      >Confirmé</label
                    >
                    <input
                      type="checkbox"
                      x-model="confirmed"
                      id="confirmed"
                      value="true"
                      class="mt-1 rounded"
                    />
                  </div>
                  <div>
                    <label for="published" class="font-medium text-gray-700"
                      >Publié</label
                    >
                    <input
                      type="checkbox"
                      x-model="published"
                      id="published"
                      value="true"
                      class="mt-1 rounded"
                    />
                  </div>
                </div>
                <div>
                  <label
                    for="description"
                    class="block font-medium text-gray-700">Description</label
                  >
                  <textarea
                    x-model="description"
                    id="description"
                    class="mt-1 block w-full p-2 border border-gray-300 rounded-md"
                  ></textarea>
                </div>
                <div class="px-4 py-3 sm:px-6 sm:flex sm:flex-row-reverse">
                  <button
                    type="submit"
                    class="px-4 py-2 bg-blue-500 text-white rounded"
                    >Soumettre</button
                  >
                  <button
                    type="button"
                    class="w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-red-600 text-base font-medium text-white hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500 sm:ml-3 sm:w-auto sm:text-sm"
                    @click="$store.modalEvent.toggle()"
                  >
                    Annuler
                  </button>
                  <div x-text="errorMessage" class="text-red-500 mt-2"></div>
                </div>
              </form>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</template>

<script>
  Alpine.data("createEvent", () => ({
    eventTitle: "film",
    date: "",
    // sHour: "17",
    // sMinute: "00",
    // eHour: "20",
    // eMinute: "00",
    // startTime: "17:00",
    // endTime: "20:00",
    hEnd: "20:00",
    hStart: "17:00",
    date_prop: [],
    responsables: [],
    benevoles: [],
    start_public: "", //heure d'ouverture du lieu au public
    end_public: "",
    start_event: "", // heure du début de l'événement (concert, projection, atelier...)
    end_event: "",
    date_request: false,
    canceled: false,
    links: [],
    contact: "",
    org_group: "", // collectifs organisant l'événement

    // Update the startTime and endTime properties when the hour or minute values change
    // emitStartTime() {
    //   this.startTime = `${this.sHour}:${this.sMinute}:00`;
    // },
    // emitEndTime() {
    //   this.endTime = `${this.eHour}:${this.eMinute}:00`;
    // },

    categories: [
      {name: "Concert", value: "concert", isChecked: false},
      {name: "Projection", value: "projection", isChecked: false},
      {name: "Atelier", value: "atelier", isChecked: false},
      {name: "Discussion", value: "discussion", isChecked: false},
    ],

    toggleCategory(index) {
      this.categories[index].isChecked = !this.categories[index].isChecked;
    },

    confirmed: false,
    published: false,
    description: "",
    image: null,
    errorMessage: "",

    submit(event) {
      if (!this.categories.some((category) => category.isChecked)) {
        this.errorMessage = "Veuillez sélectionner au moins une catégorie.";
      } else {
        const formData = new FormData(event.target);
        formData.append("event_title", this.eventTitle as string);
        formData.append("date", this.date as string);
        formData.append("start_time", this.hStart as string);
        formData.append("end_time", this.hEnd as string);
        // formData.append("start_time", this.startTime as string);
        // formData.append("end_time", this.endTime as string);
        this.categories.forEach((category) => {
          if (category.isChecked) {
            formData.append("categories[]", category.value);
          }
        });
        formData.append("confirmed", this.confirmed ? "true" : "false");
        formData.append("published", this.published ? "true" : "false");
        formData.append("description", this.description as string);

        formData.forEach((value, key) => {
          console.log(`${key}: ${value}`);
        });

        fetch("/api/CreateEvent", {
          method: "POST",
          body: formData,
        })
          .then((response) => response.json())
          .then((data) => {
            if (data.redirectTo) {
              // Effectuer la redirection
              window.location.href = data.redirectTo;
              Alpine.store("store").message =
                "Modification effectuée avec succés";
            } else {
              this.errorMessage = ""; // Réinitialiser le message d'erreur
              console.log("Données envoyées avec succès !");
              // Vous pouvez effectuer d'autres actions ici après l'envoi réussi des données
            }
          })
          .catch((error) => {
            this.errorMessage = error.message; // Mettre à jour le message d'erreur
            console.error("Erreur :", error);
          });
      }
    },
  }));
</script>
